import java.util.zip.ZipEntry
import java.util.zip.ZipFile

apply plugin: "java"
apply plugin: "war"
apply plugin: 'jetty'

sourceCompatibility = 1.6
version = '1.0.0'

repositories {
    mavenCentral()
}

ext {
    // 资源文件名称
    resourceList =["**/*.sql", "**/*.properties", "**/*.css"]
}

sourceSets {
    main {
        output.resourcesDir = "${buildDir}/classes/main"
    }
}

dependencies {
    testCompile 'junit:junit:4.+'

    compile group: 'org.hsqldb', name: 'hsqldb', version: '2.3.0'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.2'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.1.41'
    compile group: 'com.alibaba', name: 'druid', version: '1.0.9'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.8'
    compile group: 'commons-net', name: 'commons-net', version: '3.3'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.2.6'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.27'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
//    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.11'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.20'
    compile group: 'dom4j', name: 'dom4j', version: '1.6.1'
    compile group: 'jaxen', name: 'jaxen', version: '1.1.6'
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'
    compile fileTree(dir: 'libs', include: '*.jar')

    providedCompile group: 'javax.servlet', name: 'servlet-api', version: '3.0-alpha-1'
}

httpPort = 8080
stopPort = 9451
stopKey = 'foo'

task hello {
    doLast {
        println 'Hello Word!'
    }
}

task hello1 << {
    println 'Hell World 1!'
}

task upper << {
    String someString = 'myName'
    println 'Original:' + someString
    println 'Upper case:' + someString.toUpperCase()
}

task baidu(dependsOn: 'war') << {
    println "deploay baidu"

    // 解压war到部署目录
    def targetDir = "D:/workspace/appida8bje4yetp/ROOT/"
    File root = new File(targetDir);
    root.deleteDir();
    root.mkdir();

    ZipFile zipFile = new ZipFile("${project.rootDir}/core/build/libs/core-" + version + ".war")
    Enumeration<?> entries = zipFile.entries();
    while(entries.hasMoreElements()) {
        ZipEntry entry = entries.nextElement();
//        println(entry.getName())

        def filename = entry.getName();
        def buf = new byte[2048];
        filename = targetDir + filename;
        File dir = new File(filename.substring(0, filename.lastIndexOf("/")));

        if(!dir.exists()){
            dir.mkdirs();
        }

        if(!filename.endsWith("/")){
            file = new File(filename);
            file.createNewFile();
            is = zipFile.getInputStream(entry);
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos, 2048);

            while((count = is.read(buf)) > -1) {
                bos.write(buf, 0, count);
            }

            bos.flush();

            fos.close();
            is.close();
        }
    }
    zipFile.close()

    // 复制发布文件
    copy {
        from("${project.rootDir}/core/release/baidu/") {
            include("**/*.properties")
        }
        into("D:\\workspace\\appida8bje4yetp\\ROOT")
    }

    // 重写codebase
    java.lang.StringBuilder sb = new StringBuilder();
    String jnlpPath = "D:\\workspace\\appida8bje4yetp\\ROOT\\javafx\\metaui\\MetaUI.jnlp";
    java.io.BufferedReader br = new BufferedReader(new FileReader(jnlpPath));
    String line;
    while((line = br.readLine()) != null) {
        sb.append(line).append("\n");
    }
    br.close();
    String str = sb.toString();
    str = str.replace("http://localhost:8080/javafx/metaui/", "http://metaui.duapp.com/javafx/metaui/");
    println(str);
    java.io.PrintWriter pw = new PrintWriter(new FileWriter(jnlpPath));
    pw.write(str);
    pw.flush();
    pw.close();
}